#!/usr/bin/env python3
"""
Orchestrateur principal des scripts ML Optiflow
Ex√©cution selon l'ordre d√©fini dans les sp√©cifications
"""

import asyncio
import sys
import logging
from pathlib import Path
from datetime import datetime

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('batch_optiflow.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class OptiflowOrchestrator:
    """Orchestrateur principal selon les sp√©cifications"""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent
        
        # Ordre d'ex√©cution selon les specs (Notes d'impl√©mentation Page 1)
        self.execution_sequence = [
            # 1. Script 1 s'ex√©cute en premier pour g√©n√©rer les pr√©dictions
            "Page_alertes/predict_daily_sales.py",
            
            # 2. Script 4 enrichit les pr√©dictions avec l'impact des √©v√©nements  
            "Page_alertes/evaluate_events_impact.py",
            
            # 3. Script 2 utilise les pr√©dictions pour calculer les alertes
            "Page_alertes/calculate_alerts.py",
            
            # 4. Script 3 calcule les quantit√©s sur demande utilisateur (pas batch)
            # "Page_alertes/suggest_quantity.py",  # Ex√©cution √† la demande uniquement
            
            # 5. Script 5 s'ex√©cute p√©riodiquement pour am√©liorer le syst√®me
            "Page_alertes/monitor_ml_performance.py",
            
            # Scripts Dashboard (Page 2) - Nouveaux scripts int√©gr√©s
            "page2_dashboard/aggregate_dashboard_kpis.py",
            "page2_dashboard/track_savings.py",  # Script 7: √âconomies alertes
            "page2_dashboard/compare_ca_predictions.py",  # Script 8: CA pr√©vu vs r√©el
            "page2_dashboard/calculate_trends.py",  # Script 9: Tendances 7j
            "page2_dashboard/get_top_urgent.py",  # Script 10: Top 3 critiques
            "page2_dashboard/get_stock_dormant.py",  # Script 11: Stock dormant
            
            # Scripts Pr√©dictions (Page 3) - Nouveaux scripts int√©gr√©s
            "page3_predictions/generate_predictions.py",  # Script A: Tableau pr√©dictions
            "page3_predictions/calculate_accuracy.py"  # Script B: Pr√©cision
            # learn_from_feedback.py (Script C) s'ex√©cute √† la demande uniquement
        ]

    async def _run_weekly_predictions_update(self):
        """Ex√©cute la mise √† jour hebdomadaire des pr√©dictions (30 jours)"""
        try:
            script_path = self.base_dir / "weekly_predictions_update.py"

            if not script_path.exists():
                logger.error(f"Script weekly_predictions_update.py non trouv√©")
                return {'success': False, 'error': 'Script not found'}

            # Ex√©cuter avec le flag --force pour s'assurer qu'il s'ex√©cute
            result = await asyncio.create_subprocess_exec(
                sys.executable,
                str(script_path),
                '--force',
                '--days=30',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            stdout, stderr = await result.communicate()

            if result.returncode == 0:
                logger.info("Mise √† jour hebdomadaire des pr√©dictions r√©ussie")
                return {'success': True, 'output': stdout.decode()}
            else:
                logger.error(f"Erreur mise √† jour hebdomadaire: {stderr.decode()}")
                return {'success': False, 'error': stderr.decode()}

        except Exception as e:
            logger.error(f"Exception lors de la mise √† jour hebdomadaire: {str(e)}")
            return {'success': False, 'error': str(e)}

    async def run_batch_nocturne(self):
        """
        Ex√©cute le batch nocturne complet selon les specs
        Fr√©quence: 1 fois par jour √† minuit selon Page 1
        """
        logger.info("D√©but du batch nocturne Optiflow")
        start_time = datetime.now()

        # V√©rifier si c'est dimanche pour la mise √† jour hebdomadaire
        if start_time.weekday() == 6:
            logger.info("DIMANCHE: Ex√©cution de la mise √† jour hebdomadaire des pr√©dictions")
            await self._run_weekly_predictions_update()

        logger.info("Ex√©cution du batch quotidien")
        start_time = datetime.now()
        
        results = {
            'start_time': start_time.isoformat(),
            'scripts_executed': [],
            'scripts_failed': [],
            'total_duration': 0
        }
        
        # √âtape pr√©alable: Sauvegarder les snapshots quotidiens pour les tendances
        await self._save_daily_snapshots()
        
        for script_path in self.execution_sequence:
            full_path = self.base_dir / script_path
            
            if not full_path.exists():
                logger.warning(f" Script non trouv√©: {script_path}")
                results['scripts_failed'].append({
                    'script': script_path,
                    'error': 'Script file not found'
                })
                continue
            
            logger.info(f"Ex√©cution: {script_path}")
            
            try:
                # Ex√©cution du script
                result = await self._execute_script(full_path)
                
                if result['success']:
                    logger.info(f" Succ√®s: {script_path}")
                    results['scripts_executed'].append({
                        'script': script_path,
                        'duration': result['duration'],
                        'output': result.get('output', '')
                    })
                else:
                    logger.error(f" √âchec: {script_path} - {result['error']}")
                    results['scripts_failed'].append({
                        'script': script_path,
                        'error': result['error']
                    })
                    
            except Exception as e:
                logger.error(f"üí• Erreur inattendue: {script_path} - {e}")
                results['scripts_failed'].append({
                    'script': script_path,
                    'error': str(e)
                })
        
        # Finalisation
        end_time = datetime.now()
        results['end_time'] = end_time.isoformat()
        results['total_duration'] = (end_time - start_time).total_seconds()
        
        logger.info(f" Batch termin√© en {results['total_duration']:.1f}s")
        logger.info(f" R√©sultats: {len(results['scripts_executed'])} succ√®s, {len(results['scripts_failed'])} √©checs")
        
        return results
    
    async def _execute_script(self, script_path):
        """Ex√©cute un script Python de mani√®re asynchrone"""
        script_start = datetime.now()
        
        try:
            process = await asyncio.create_subprocess_exec(
                sys.executable, str(script_path),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=str(script_path.parent)
            )
            
            stdout, stderr = await process.communicate()
            
            duration = (datetime.now() - script_start).total_seconds()
            
            return {
                'success': process.returncode == 0,
                'duration': duration,
                'returncode': process.returncode,
                'output': stdout.decode() if stdout else '',
                'error': stderr.decode() if stderr else ''
            }
            
        except Exception as e:
            duration = (datetime.now() - script_start).total_seconds()
            return {
                'success': False,
                'duration': duration,
                'error': str(e)
            }
    
    async def run_single_script(self, script_name):
        """Ex√©cute un script sp√©cifique √† la demande"""
        # Recherche du script dans tous les dossiers
        for subdir in ['Page_alertes', 'page2_dashboard', 'page3_predictions', 'utils']:
            script_path = self.base_dir / subdir / script_name
            if script_path.exists():
                logger.info(f" Ex√©cution √† la demande: {script_name}")
                return await self._execute_script(script_path)
        
        return {
            'success': False,
            'error': f'Script non trouv√©: {script_name}'
        }
    
    async def _save_daily_snapshots(self):
        """
        Sauvegarde les snapshots quotidiens n√©cessaires aux analyses de tendances
        Appel√© avant le batch principal
        """
        try:
            logger.info("üì∏ Sauvegarde des snapshots quotidiens...")
            
            # Importer et ex√©cuter le snapshot des alertes
            import sys
            sys.path.insert(0, str(self.base_dir / 'page2_dashboard'))
            
            from calculate_trends import AlertsTrendsCalculator
            
            calculator = AlertsTrendsCalculator()
            success = calculator.save_daily_snapshot()
            
            if success:
                logger.info(" Snapshots sauvegard√©s avec succ√®s")
            else:
                logger.warning(" Probl√®me lors de la sauvegarde des snapshots")
                
        except Exception as e:
            logger.error(f" Erreur sauvegarde snapshots: {e}")
    
    async def run_on_demand_scripts(self, script_list):
        """
        Ex√©cute des scripts √† la demande (ex: suggest_quantity, learn_from_feedback)
        
        Args:
            script_list: Liste des noms de scripts √† ex√©cuter
            
        Returns:
            Dict avec r√©sultats de chaque script
        """
        logger.info(f" Ex√©cution √† la demande: {', '.join(script_list)}")
        results = {}
        
        for script_name in script_list:
            result = await self.run_single_script(script_name)
            results[script_name] = result
            
            if result['success']:
                logger.info(f" {script_name} termin√© avec succ√®s")
            else:
                logger.error(f" {script_name} a √©chou√©: {result.get('error', 'Erreur inconnue')}")
        
        return results

async def main():
    """Point d'entr√©e principal"""
    orchestrator = OptiflowOrchestrator()
    
    if len(sys.argv) > 1:
        # Ex√©cution d'un script sp√©cifique
        script_name = sys.argv[1]
        result = await orchestrator.run_single_script(script_name)
        
        if result['success']:
            print(f" Script {script_name} ex√©cut√© avec succ√®s")
            sys.exit(0)
        else:
            print(f" √âchec du script {script_name}: {result['error']}")
            sys.exit(1)
    else:
        # Batch nocturne complet
        result = await orchestrator.run_batch_nocturne()
        
        if len(result['scripts_failed']) == 0:
            print(" Batch nocturne termin√© avec succ√®s")
            sys.exit(0)
        else:
            print(f" Batch termin√© avec {len(result['scripts_failed'])} erreurs")
            sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())