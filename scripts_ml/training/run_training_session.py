#!/usr/bin/env python3
"""
run_training_session.py - Orchestrateur de la session d'entra√Ænement
Lance l'entra√Ænement complet des mod√®les Prophet avec validation
"""

import asyncio
import subprocess
import sys
import json
import logging
from datetime import datetime
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TrainingSessionOrchestrator:
    """Orchestrateur de session d'entra√Ænement ML"""
    
    def __init__(self):
        self.scripts_dir = Path(__file__).parent
        self.models_dir = Path("models")
        self.models_dir.mkdir(exist_ok=True)
        
    async def run_script(self, script_name, description):
        """Ex√©cute un script d'entra√Ænement"""
        logger.info(f"‚ñ∂ {description}")
        
        script_path = self.scripts_dir / script_name
        
        try:
            process = await asyncio.create_subprocess_exec(
                sys.executable, str(script_path),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            # Parse du r√©sultat JSON si disponible
            result = {'success': process.returncode == 0}
            
            try:
                if stdout:
                    json_output = json.loads(stdout.decode())
                    result.update(json_output)
            except json.JSONDecodeError:
                result['output'] = stdout.decode() if stdout else ''
            
            if stderr:
                result['error'] = stderr.decode()
            
            if result['success']:
                logger.info(f" {description} - Termin√© avec succ√®s")
            else:
                logger.error(f" {description} - √âchec")
                if 'error' in result:
                    logger.error(f"   Erreur: {result['error']}")
            
            return result
            
        except Exception as e:
            logger.error(f"üí• Erreur ex√©cution {script_name}: {e}")
            return {'success': False, 'error': str(e)}
    
    async def run_training_session(self):
        """Ex√©cute la session d'entra√Ænement compl√®te"""
        logger.info(" D√âBUT SESSION D'ENTRA√éNEMENT OPTIFLOW ML")
        logger.info("=" * 60)
        
        session_start = datetime.now()
        session_results = {
            'session_id': f"training_{session_start.strftime('%Y%m%d_%H%M%S')}",
            'started_at': session_start.isoformat(),
            'steps': []
        }
        
        # √âTAPE 1: Pr√©paration des √©v√©nements
        events_result = await self.run_script(
            'prepare_events.py',
            'Pr√©paration des √©v√©nements Prophet'
        )
        session_results['steps'].append({
            'step': 1,
            'name': 'prepare_events',
            'result': events_result
        })
        
        if not events_result['success']:
            logger.error("üõë √âchec pr√©paration √©v√©nements - Arr√™t de la session")
            return session_results
        
        # √âTAPE 2: V√©rification des d√©pendances
        deps_result = await self.check_dependencies()
        session_results['steps'].append({
            'step': 2,
            'name': 'check_dependencies',
            'result': deps_result
        })
        
        if not deps_result['success']:
            logger.error("üõë D√©pendances manquantes - Installation n√©cessaire")
            logger.info(" Ex√©cutez: pip install prophet pandas numpy scikit-learn")
            return session_results
        
        # √âTAPE 3: Entra√Ænement des mod√®les
        training_result = await self.run_script(
            'train_models.py',
            'Entra√Ænement des 12 mod√®les Prophet'
        )
        session_results['steps'].append({
            'step': 3,
            'name': 'train_models',
            'result': training_result
        })
        
        if not training_result['success']:
            logger.error("üõë √âchec entra√Ænement des mod√®les")
            return session_results
        
        # √âTAPE 4: Validation des mod√®les
        validation_result = await self.run_script(
            'validate_training.py',
            'Validation des mod√®les entra√Æn√©s'
        )
        session_results['steps'].append({
            'step': 4,
            'name': 'validate_training',
            'result': validation_result
        })
        
        # √âTAPE 5: G√©n√©ration du rapport final
        final_report = self.generate_final_report(session_results)
        
        session_end = datetime.now()
        session_results['completed_at'] = session_end.isoformat()
        session_results['total_duration'] = (session_end - session_start).total_seconds()
        session_results['final_report'] = final_report
        
        # Sauvegarde de la session
        self.save_session_results(session_results)
        
        logger.info("=" * 60)
        logger.info("üèÅ SESSION D'ENTRA√éNEMENT TERMIN√âE")
        logger.info(f"‚è± Dur√©e: {session_results['total_duration']:.1f}s")
        
        return session_results
    
    async def check_dependencies(self):
        """V√©rifie les d√©pendances n√©cessaires"""
        try:
            # Test import Prophet
            import prophet
            import pandas as pd
            import numpy as np
            import sklearn
            
            return {
                'success': True,
                'prophet_version': prophet.__version__,
                'pandas_version': pd.__version__,
                'numpy_version': np.__version__
            }
            
        except ImportError as e:
            return {
                'success': False,
                'error': f'D√©pendance manquante: {e}',
                'missing_packages': ['prophet', 'pandas', 'numpy', 'scikit-learn']
            }
    
    def generate_final_report(self, session_results):
        """G√©n√®re le rapport final de session"""
        
        # Extraction des m√©triques cl√©s
        training_step = next((s for s in session_results['steps'] if s['name'] == 'train_models'), None)
        validation_step = next((s for s in session_results['steps'] if s['name'] == 'validate_training'), None)
        
        models_trained = training_step['result'].get('models_trained', 0) if training_step and training_step['result']['success'] else 0
        models_failed = training_step['result'].get('models_failed', 0) if training_step and training_step['result']['success'] else 0
        global_mape = training_step['result'].get('global_mape', 0) if training_step and training_step['result']['success'] else 0
        
        validation_passed = validation_step['result'].get('validation_passed', False) if validation_step and validation_step['result']['success'] else False
        
        report = {
            'session_success': all(step['result']['success'] for step in session_results['steps']),
            'models_trained': models_trained,
            'models_failed': models_failed,
            'success_rate': (models_trained / (models_trained + models_failed)) * 100 if (models_trained + models_failed) > 0 else 0,
            'global_mape': global_mape,
            'validation_passed': validation_passed,
            'performance_grade': self.calculate_performance_grade(global_mape, validation_passed),
            'next_steps': self.generate_next_steps(global_mape, validation_passed, models_trained)
        }
        
        # Affichage du rapport
        logger.info(" RAPPORT FINAL")
        logger.info("-" * 30)
        logger.info(f" Mod√®les entra√Æn√©s: {models_trained}/12")
        logger.info(f" √âchecs: {models_failed}")
        logger.info(f" MAPE global: {global_mape:.2f}%")
        logger.info(f" Validation: {'R√âUSSIE' if validation_passed else '√âCHOU√âE'}")
        logger.info(f"üèÜ Note: {report['performance_grade']}")
        
        return report
    
    def calculate_performance_grade(self, mape, validation_passed):
        """Calcule la note de performance"""
        if not validation_passed:
            return 'F'
        elif mape < 10:
            return 'A+'
        elif mape < 12:
            return 'A'
        elif mape < 15:
            return 'B'
        elif mape < 20:
            return 'C'
        else:
            return 'D'
    
    def generate_next_steps(self, mape, validation_passed, models_trained):
        """G√©n√®re les prochaines √©tapes recommand√©es"""
        next_steps = []
        
        if models_trained < 10:
            next_steps.append("R√©entra√Æner les mod√®les en √©chec")
        
        if mape > 15:
            next_steps.append("Optimiser les hyperparam√®tres Prophet")
            next_steps.append("Analyser les outliers dans les donn√©es")
        
        if not validation_passed:
            next_steps.append("Investiguer les incoh√©rences de validation")
        
        if not next_steps:
            next_steps.append("Mod√®les pr√™ts pour la production")
            next_steps.append("Int√©grer dans le batch nocturne")
            next_steps.append("Tester les pr√©dictions en temps r√©el")
        
        return next_steps
    
    def save_session_results(self, session_results):
        """Sauvegarde les r√©sultats de session"""
        try:
            session_file = self.models_dir / f"training_session_{session_results['session_id']}.json"
            
            with open(session_file, 'w') as f:
                json.dump(session_results, f, indent=2)
            
            logger.info(f"üìÑ Session sauv√©e: {session_file}")
            
        except Exception as e:
            logger.error(f"Erreur sauvegarde session: {e}")

async def main():
    """Point d'entr√©e principal"""
    orchestrator = TrainingSessionOrchestrator()
    session_results = await orchestrator.run_training_session()
    
    # Code de sortie selon le succ√®s
    success = session_results['final_report']['session_success']
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(main())