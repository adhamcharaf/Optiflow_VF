"""
Dashboard OptiFlow - Page d'accueil centralis√©e
Affiche l'essentiel en 3 rang√©es : bandeau d'√©tat, modules d'action, graphiques
"""

import streamlit as st
import pandas as pd
import sqlite3
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import sys
from pathlib import Path

# Configuration de la page
st.set_page_config(
    page_title="OptiFlow Dashboard",
    page_icon="üìä",
    layout="wide"
)

# Ajouter les chemins n√©cessaires
sys.path.append(str(Path(__file__).parent.parent.parent))

# Import des utilitaires
from utils.database import OptiflowDB

# Couleurs coh√©rentes
COLORS = {
    'CRITIQUE': '#dc3545',
    'ATTENTION': '#ffc107',
    'OK': '#28a745'
}

@st.cache_data(ttl=300)  # Cache de 5 minutes
def load_dashboard_data():
    """Charge toutes les donn√©es n√©cessaires au dashboard en une fois"""
    db = OptiflowDB()
    data = {}

    # Import pandas pour les DataFrames vides
    import pandas as pd
        # 1. Compteurs d'alertes
        query_alerts = """
            SELECT
                CASE
                    WHEN severity = 'critical' THEN 'CRITIQUE'
                    WHEN severity = 'warning' THEN 'ATTENTION'
                    WHEN severity = 'high' THEN 'CRITIQUE'
                    WHEN severity = 'medium' THEN 'ATTENTION'
                    ELSE 'OK'
                END as niveau,
                COUNT(*) as count
            FROM alerts
            WHERE status = 'active'
            GROUP BY severity
        """
        alerts_df = db.get_dataframe(query_alerts)
        data['alerts'] = alerts_df

        # 2. Valeur totale du stock
        query_stock = """
            SELECT
                COALESCE(SUM(sl.quantity_on_hand * p.unit_price), 0) as valeur_totale,
                COALESCE(SUM(sl.quantity_on_hand), 0) as quantite_totale
            FROM stock_levels sl
            JOIN products p ON sl.product_id = p.id
        """
        stock_value = db.execute_query(query_stock, fetch_all=False)
        data['stock_value'] = stock_value[0] if stock_value else 0
        data['stock_quantity'] = stock_value[1] if stock_value else 0

        # 3. Top 3 alertes critiques
        query_top_alerts = """
            SELECT
                p.name as produit,
                COALESCE(sl.quantity_on_hand * p.unit_price, 0) as perte,
                CASE
                    WHEN sl.quantity_on_hand <= 0 THEN 0
                    WHEN sl.quantity_on_hand < 10 THEN 1
                    ELSE 3
                END as jours_restants
            FROM alerts a
            JOIN products p ON a.product_id = p.id
            LEFT JOIN stock_levels sl ON sl.product_id = p.id
            WHERE (a.severity = 'critical' OR a.severity = 'high')
                AND a.status = 'active'
            ORDER BY perte DESC
            LIMIT 3
        """
        data['top_alerts'] = db.get_dataframe(query_top_alerts)

        # 4. Pr√©dictions semaine (7 prochains jours)
        query_predictions = """
            SELECT
                COALESCE(SUM(f.predicted_quantity), 0) as total_predictions,
                COALESCE(SUM(f.predicted_quantity * p.unit_price), 0) as valeur_predictions
            FROM forecasts f
            JOIN products p ON f.product_id = p.id
            WHERE f.forecast_date BETWEEN date('now') AND date('now', '+7 days')
        """
        pred_result = db.execute_query(query_predictions, fetch_all=False)
        data['predictions_week'] = pred_result[0] if pred_result else 0
        data['predictions_value'] = pred_result[1] if pred_result else 0

        # 5. Commandes du jour et de la semaine
        query_orders_today = """
            SELECT
                COUNT(DISTINCT id) as nb_commandes,
                COALESCE(SUM(quantity_ordered * unit_price), 0) as montant_total
            FROM orders
            WHERE DATE(order_date) = DATE('now')
        """
        orders_today = db.execute_query(query_orders_today, fetch_all=False)
        data['orders_today_count'] = orders_today[0] if orders_today else 0
        data['orders_today_amount'] = orders_today[1] if orders_today else 0

        query_orders_week = """
            SELECT
                COUNT(DISTINCT id) as nb_commandes,
                COALESCE(SUM(quantity_ordered * unit_price), 0) as montant_total
            FROM orders
            WHERE DATE(order_date) >= DATE('now', '-7 days')
        """
        orders_week = db.execute_query(query_orders_week, fetch_all=False)
        data['orders_week_count'] = orders_week[0] if orders_week else 0
        data['orders_week_amount'] = orders_week[1] if orders_week else 0

        # 6. Performance syst√®me (MAPE bas√© sur les ventes r√©elles)
        # Utiliser get_dataframe au lieu de execute_query pour les CTE
        query_performance = """
            SELECT
                f.predicted_quantity,
                COALESCE(sh.quantity, 0) as actual_quantity
            FROM forecasts f
            LEFT JOIN sales_history sh ON sh.product_id = f.product_id
                AND DATE(sh.date) = DATE(f.forecast_date)
            WHERE f.forecast_date <= date('now')
                AND f.forecast_date >= date('now', '-30 days')
                AND sh.quantity > 0
        """
        perf_df = db.get_dataframe(query_performance)
        if perf_df is not None and not perf_df.empty:
            # Calculer MAPE manuellement
            perf_df['ape'] = abs(perf_df['predicted_quantity'] - perf_df['actual_quantity']) * 100 / perf_df['actual_quantity']
            mape = perf_df['ape'].mean()
        else:
            mape = 15  # D√©faut 15%
        data['precision'] = 100 - mape  # Convertir MAPE en pr√©cision

        # 7. Tendance pr√©cision (vs semaine derni√®re)
        query_perf_last_week = """
            SELECT
                f.predicted_quantity,
                COALESCE(sh.quantity, 0) as actual_quantity
            FROM forecasts f
            LEFT JOIN sales_history sh ON sh.product_id = f.product_id
                AND DATE(sh.date) = DATE(f.forecast_date)
            WHERE f.forecast_date BETWEEN date('now', '-14 days') AND date('now', '-7 days')
                AND sh.quantity > 0
        """
        perf_last_df = db.get_dataframe(query_perf_last_week)
        if perf_last_df is not None and not perf_last_df.empty:
            perf_last_df['ape'] = abs(perf_last_df['predicted_quantity'] - perf_last_df['actual_quantity']) * 100 / perf_last_df['actual_quantity']
            mape_last = perf_last_df['ape'].mean()
        else:
            mape_last = 15
        data['precision_last'] = 100 - mape_last
        data['precision_trend'] = data['precision'] - data['precision_last']

        # 8. Anomalies en attente
        query_anomalies = """
            SELECT COUNT(*) as count
            FROM anomalies
            WHERE status = 'pending'
        """
        anomalies = db.execute_query(query_anomalies, fetch_all=False)
        data['anomalies_count'] = anomalies[0] if anomalies else 0

        # 9. √âvolution alertes critiques (7 derniers jours)
        query_alerts_evolution = """
            SELECT
                DATE(created_at) as date,
                COUNT(*) as nb_critiques
            FROM alerts
            WHERE (severity = 'critical' OR severity = 'high')
                AND DATE(created_at) >= DATE('now', '-7 days')
            GROUP BY DATE(created_at)
            ORDER BY date
        """
        data['alerts_evolution'] = db.get_dataframe(query_alerts_evolution)

        # 10. CA pr√©vu vs r√©el (7 derniers jours)
        # Requ√™te pour CA pr√©vu
        query_ca_prevu = """
            SELECT
                DATE(f.forecast_date) as date,
                SUM(f.predicted_quantity * p.unit_price) as ca_prevu
            FROM forecasts f
            JOIN products p ON f.product_id = p.id
            WHERE f.forecast_date BETWEEN date('now', '-7 days') AND date('now')
            GROUP BY DATE(f.forecast_date)
        """
        ca_prevu_df = db.get_dataframe(query_ca_prevu)

        # Requ√™te pour CA r√©el
        query_ca_reel = """
            SELECT
                DATE(sh.date) as date,
                SUM(sh.quantity * p.unit_price) as ca_reel
            FROM sales_history sh
            JOIN products p ON sh.product_id = p.id
            WHERE sh.date BETWEEN date('now', '-7 days') AND date('now')
            GROUP BY DATE(sh.date)
        """
        ca_reel_df = db.get_dataframe(query_ca_reel)

        # Fusionner les deux DataFrames
        if ca_prevu_df is not None and ca_reel_df is not None:
            import pandas as pd
            data['ca_comparison'] = pd.merge(
                ca_prevu_df, ca_reel_df,
                on='date', how='outer'
            ).fillna(0).sort_values('date')
        else:
            data['ca_comparison'] = pd.DataFrame()

        # Timestamp de derni√®re mise √† jour
        data['last_update'] = datetime.now()

    except Exception as e:
        st.error(f"Erreur chargement donn√©es : {e}")

    return data

def display_alert_counter(label, count, color):
    """Affiche un compteur d'alerte color√©"""
    return f'<div style="display: inline-block; margin: 0 10px; padding: 5px 10px; background-color: {color}; color: white; border-radius: 5px; font-weight: bold;">{label}: {count}</div>'

def main():
    # Charger les donn√©es
    data = load_dashboard_data()

    # ========== RANG√âE 1 : BANDEAU D'√âTAT GLOBAL ==========
    st.markdown("# üìä OptiFlow Dashboard")

    col1, col2, col3, col4, col5 = st.columns([2, 2, 2, 2, 2])

    with col1:
        # Compteurs d'alertes
        alerts_counts = {'CRITIQUE': 0, 'ATTENTION': 0, 'OK': 0}
        if 'alerts' in data and not data['alerts'].empty:
            for _, row in data['alerts'].iterrows():
                alerts_counts[row['niveau']] = row['count']

        html_alerts = ""
        html_alerts += display_alert_counter("üî¥ Critiques", alerts_counts['CRITIQUE'], COLORS['CRITIQUE'])
        html_alerts += display_alert_counter("üü° Attention", alerts_counts['ATTENTION'], COLORS['ATTENTION'])
        html_alerts += display_alert_counter("üü¢ OK", alerts_counts['OK'], COLORS['OK'])
        st.markdown(html_alerts, unsafe_allow_html=True)

    with col2:
        st.metric(
            "üí∞ Valeur Stock Total",
            f"{data.get('stock_value', 0):,.0f} FCFA",
            f"{data.get('stock_quantity', 0):.0f} unit√©s"
        )

    with col3:
        precision = data.get('precision', 85)
        trend = data.get('precision_trend', 0)
        arrow = "‚Üó" if trend >= 0 else "‚Üò"
        st.metric(
            "üéØ Pr√©cision Syst√®me",
            f"{precision:.1f}%",
            f"{trend:+.1f}% {arrow}"
        )

    with col4:
        st.metric(
            "‚è±Ô∏è Derni√®re MAJ",
            data.get('last_update', datetime.now()).strftime("%H:%M"),
            data.get('last_update', datetime.now()).strftime("%d/%m/%Y")
        )

    st.divider()

    # ========== RANG√âE 2 : 4 MODULES D'ACTION ==========

    col1, col2, col3, col4 = st.columns(4)

    # MODULE 1 : Top 3 Alertes Urgentes
    with col1:
        with st.container(border=True):
            st.markdown("### üö® Top 3 Alertes Urgentes")

            if 'top_alerts' in data and not data['top_alerts'].empty:
                for idx, alert in data['top_alerts'].iterrows():
                    st.markdown(f"**{alert['produit']}**")
                    col_a, col_b = st.columns(2)
                    with col_a:
                        st.caption(f"Perte: {alert['perte']:,.0f} FCFA")
                    with col_b:
                        st.caption(f"Rupture: {alert['jours_restants']:.0f}j")
                    if idx < len(data['top_alerts']) - 1:
                        st.divider()
            else:
                st.success("‚úÖ Aucune alerte critique")

            if st.button("‚Üí Toutes alertes", key="btn_alertes", use_container_width=True):
                st.switch_page("pages/alertes.py")

    # MODULE 2 : Pr√©dictions Semaine
    with col2:
        with st.container(border=True):
            st.markdown("### üìà Pr√©dictions Semaine")

            total_pred = data.get('predictions_week', 0)
            total_stock = data.get('stock_quantity', 0)
            delta = total_pred - total_stock

            st.metric("Besoins 7j", f"{total_pred:,.0f} unit√©s")
            st.metric("Stock actuel", f"{total_stock:,.0f} unit√©s")

            if delta > 0:
                st.error(f"‚ùå Manque: {delta:,.0f} unit√©s")
            else:
                st.success(f"‚úÖ Surplus: {abs(delta):,.0f} unit√©s")

            st.caption(f"Valeur: {data.get('predictions_value', 0):,.0f} FCFA")

            if st.button("‚Üí D√©tails produits", key="btn_predictions", use_container_width=True):
                st.switch_page("pages/predictions.py")

    # MODULE 3 : Commandes du Jour
    with col3:
        with st.container(border=True):
            st.markdown("### üì¶ Commandes")

            # Aujourd'hui
            st.markdown("**Aujourd'hui**")
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("Nombre", f"{data.get('orders_today_count', 0)}")
            with col_b:
                st.metric("Montant", f"{data.get('orders_today_amount', 0):,.0f} FCFA")

            st.divider()

            # Cette semaine
            st.markdown("**Cette semaine**")
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("Nombre", f"{data.get('orders_week_count', 0)}")
            with col_b:
                st.metric("Total", f"{data.get('orders_week_amount', 0):,.0f} FCFA")

            if st.button("‚Üí Historique", key="btn_orders", use_container_width=True):
                st.info("Coming soon")

    # MODULE 4 : Am√©lioration Syst√®me
    with col4:
        with st.container(border=True):
            st.markdown("### üîß Am√©lioration Syst√®me")

            precision = data.get('precision', 85)
            trend = data.get('precision_trend', 0)

            # Barre de progression
            st.progress(precision / 100, text=f"Pr√©cision: {precision:.1f}%")

            # Tendance
            if trend >= 0:
                st.success(f"+{trend:.1f}% ‚Üó vs semaine derni√®re")
            else:
                st.warning(f"{trend:.1f}% ‚Üò vs semaine derni√®re")

            # Anomalies
            anomalies_count = data.get('anomalies_count', 0)
            if anomalies_count > 0:
                st.warning(f"‚ö†Ô∏è {anomalies_count} anomalies √† valider")
            else:
                st.success("‚úÖ Pas d'anomalie en attente")

            if st.button("‚Üí Valider", key="btn_amelioration", use_container_width=True):
                st.switch_page("pages/amelioration.py")

    st.divider()

    # ========== RANG√âE 3 : GRAPHIQUES DE TENDANCE ==========

    col1, col2 = st.columns(2)

    # GRAPHIQUE 1 : √âvolution des alertes critiques
    with col1:
        st.markdown("### üìâ √âvolution Alertes Critiques (7 jours)")

        if 'alerts_evolution' in data and not data['alerts_evolution'].empty:
            df_alerts = data['alerts_evolution']

            # Compl√©ter les jours manquants
            date_range = pd.date_range(
                start=(datetime.now() - timedelta(days=7)).date(),
                end=datetime.now().date(),
                freq='D'
            )
            df_complete = pd.DataFrame({'date': date_range})
            df_complete['date'] = df_complete['date'].astype(str)
            df_alerts['date'] = df_alerts['date'].astype(str)
            df_merged = df_complete.merge(df_alerts, on='date', how='left')
            df_merged['nb_critiques'] = df_merged['nb_critiques'].fillna(0)

            # Cr√©er le graphique
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=df_merged['date'],
                y=df_merged['nb_critiques'],
                mode='lines+markers',
                name='Alertes critiques',
                line=dict(color=COLORS['CRITIQUE'], width=3),
                marker=dict(size=8)
            ))

            # Mettre en √©vidence aujourd'hui
            today_idx = len(df_merged) - 1
            if today_idx >= 0:
                fig.add_trace(go.Scatter(
                    x=[df_merged.iloc[today_idx]['date']],
                    y=[df_merged.iloc[today_idx]['nb_critiques']],
                    mode='markers',
                    name="Aujourd'hui",
                    marker=dict(size=12, color='yellow', line=dict(width=2, color='black'))
                ))

            fig.update_layout(
                xaxis_title="Date",
                yaxis_title="Nombre d'alertes",
                height=300,
                showlegend=False,
                hovermode='x unified'
            )

            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Pas de donn√©es disponibles")

    # GRAPHIQUE 2 : CA pr√©vu vs r√©el
    with col2:
        st.markdown("### üí∞ CA Pr√©vu vs R√©el (7 jours cumul√©s)")

        if 'ca_comparison' in data and not data['ca_comparison'].empty:
            df_ca = data['ca_comparison']

            # Calculer les totaux
            total_prevu = df_ca['ca_prevu'].sum()
            total_reel = df_ca['ca_reel'].sum()
            ecart_pct = ((total_reel - total_prevu) / total_prevu * 100) if total_prevu > 0 else 0
            ecart_val = total_reel - total_prevu

            # Cr√©er le graphique √† barres horizontales
            fig = go.Figure()

            fig.add_trace(go.Bar(
                x=[total_prevu],
                y=['CA Pr√©vu'],
                orientation='h',
                name='Pr√©vu',
                marker_color='lightblue',
                text=f"{total_prevu:,.0f} FCFA",
                textposition='inside'
            ))

            fig.add_trace(go.Bar(
                x=[total_reel],
                y=['CA R√©el'],
                orientation='h',
                name='R√©el',
                marker_color='green' if total_reel >= total_prevu else 'orange',
                text=f"{total_reel:,.0f} FCFA",
                textposition='inside'
            ))

            fig.update_layout(
                xaxis_title="Montant (FCFA)",
                height=250,
                showlegend=False,
                barmode='group'
            )

            st.plotly_chart(fig, use_container_width=True)

            # Afficher l'√©cart
            if ecart_val >= 0:
                st.success(f"üìà √âcart: +{ecart_val:,.0f} FCFA ({ecart_pct:+.1f}%)")
            else:
                st.warning(f"üìâ √âcart: {ecart_val:,.0f} FCFA ({ecart_pct:.1f}%)")
        else:
            st.info("Pas de donn√©es disponibles")

    # Bouton de rafra√Æchissement
    col1, col2, col3 = st.columns([4, 1, 1])
    with col3:
        if st.button("üîÑ Actualiser", key="refresh_dashboard"):
            st.cache_data.clear()
            st.rerun()

if __name__ == "__main__":
    main()